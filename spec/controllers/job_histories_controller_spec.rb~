require 'rails_helper'

RSpec.describe JobHistoriesController, type: :controller do

	let(:user) { FactoryGirl.create(:user) }
	let(:jobhistory) { FactoryGirl.create(:jobhistory, user: user) }

#Having Same Errors as the other tests	
	describe "Get index" do

		before do
			get :index
		end
		
		it "loads the jobs related to current user" do
			expect(assigns(:jobhistory)).to eq(user)
		end
	end

	describe "Get new" do
	
		let(:jobhistory) { FactoryGirl.create(:jobhistory) }
		let(:user) { FactoryGirl.create(:user) }

		it "redirects to job histories index page if successful with equivilent flash msg" do

			expect(response).to redirect_to(job_histories_path)
			expect(flash[:success]).to eq("Thank you for adding to your Job History!")
		end

		it "redirects to job histories index page if unsuccessful with equivilent flash msg" do

			expect(response).to redirect_to(job_histories_path)
			expect(flash[:danger]).to eq("There was a problem in saving your Job History!")
		end

	end






	describe "POST create" do
		let(:reference_redirection1) { FactoryGirl.create(:reference_redirection1) }
		let(:jobhistory) { FactoryGirl.build(:jobhistory) }
		let(:job_histories_attr) { 
			{ employer: reference1.first_name,
			  start_date: reference1.last_name,
			  end_date: reference1.company,
			  position: reference1.position,
			  description: reference1.email,
			  skills: reference1.phone_number,
			  user_id: reference_redirection1.user_id
			} 
		}

		context "creates the job history" do
			before(:each) do
				@count = Reference.count
				@request.env['HTTP_REFERER'] = "http://localhost/references/new/chDXcg5FJFdG_w"

				post :create, id: jobhistory.id, jobhistories: job_histories_attr
			end

			it "increases the count by one" do
				expect(Reference.count).to eq(@count+1)
			end

			it "should have the new reference in it" do
				expect(Reference.last.first_name).to eq(reference1.first_name)
			end


			it "redirects to the root page if sucessful with a confirmation msg" do
				expect(response).to redirect_to(root_path)
				expect(flash[:success]).to eq("Thank you for making a reference!")
			end
		end
	end

	describe "PATCH update" do
		let(:reference1) { FactoryGirl.create(:reference1) }
		let(:user) { FactoryGirl.create(:user) }
		let(:user2) { FactoryGirl.create(:user2) }

		context "user is not logged in" do
			it "redirects the user when not logged in" do
				patch :update, id: reference1.id
		
				expect(response).to redirect_to(new_user_session_path)
			end
		end

		context "user is logged in" do
			before(:each) do
				user.references << reference1
			end	

			it "redirects if user is not the reference's owner" do
				sign_in user2
				patch :update, id: reference1.id

				expect(response).to redirect_to(user_path(user2))
			end

			it "updates the reference to set confirmed to the opposite" do
				sign_in user
				patch :update, id: reference1.id

				expect(Reference.find(reference1.id).confirmed).to eq(true)
			end
		end
	end

	describe "DELETE delete" do
		let(:reference1) { FactoryGirl.create(:reference1) }
		let(:user) { FactoryGirl.create(:user) }
		let(:user2) { FactoryGirl.create(:user2) }

		context "incorrect user" do
			it "redirects the user when not logged in" do
				delete :delete, id: reference1.id
				expect(response).to redirect_to(new_user_session_path)
			end

			it "redirects if user is not the reference's owner" do
				sign_in user2
				delete :delete, id: reference1.id
				expect(response).to redirect_to(user_path(user2))
			end
		end

		context "user is logged in" do
			before(:each) do
				sign_in user
				user.references << reference1
				@count = Reference.count
				delete :delete, id: reference1.id
			end	

			it "redirects to references page after deleting" do
				expect(response).to redirect_to(references_path)
			end

			it "should have one less reference" do
				expect(Reference.count).to eq(@count-1)
			end

			it "should not have the reference" do
				expect {Reference.find(reference1.id)}.to raise_exception(ActiveRecord::RecordNotFound)
			end
		end
	end






end

